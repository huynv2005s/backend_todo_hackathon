generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  provider      String
  avatar        String
  boards        Board[]       @relation("UserBoards")
  boardMembers  BoardMember[]
  comments      Comment[]
  tasksAssigned Task[]        @relation("TaskAssignee")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userBoardId   String?
  UserBoard     UserBoard[]
}

model Board {
  id        String        @id @default(cuid())
  title     String
  ownerId   String
  owner     User          @relation("UserBoards", fields: [ownerId], references: [id])
  pinned    Boolean       @default(false)
  isPublic  Boolean       @default(false)
  columns   Column[]
  members   BoardMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  UserBoard UserBoard[]
}

model UserBoard {
  id        String   @id @default(cuid())
  userId    String
  boardId   String
  user      User     @relation(fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoardMember {
  id        String   @id @default(cuid())
  userId    String
  boardId   String
  role      String // "admin" | "member" | "viewer"
  status    String // "joined" | "pending" | "suggested"
  user      User     @relation(fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, boardId])
}

model Column {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  position  Int
  board     Board    @relation(fields: [boardId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String?

  @@unique([boardId, position])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  columnId    String
  position    Int
  startDate   DateTime?
  dateDone    DateTime?
  status      String    @default("todo") // "todo" | "in-progress" | "done"
  priority    String    @default("medium") // "low" | "medium" |
  assigneeId  String?
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([columnId, position])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
